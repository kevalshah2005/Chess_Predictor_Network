# -*- coding: utf-8 -*-
"""Copy of Final Project Draft

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UhJrE3R3HC4h3HIuYO5p5Iqz93QCIMiG
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import imageio
import keras
from keras import models
from keras import layers
from keras import optimizers
from keras import losses
from keras import metrics
from google.colab import files
from google.colab import drive
import io
import matplotlib.pyplot as plt

drive.mount('/content/drive')

data_path = "/content/drive/MyDrive/MLFinalProjectFiles/Med_Data.xlsx"
targets_path = "/content/drive/MyDrive/MLFinalProjectFiles/Med_Targets.xlsx"

df = pd.read_excel(data_path)
df1 = pd.read_excel(targets_path)

df = df.to_numpy()
df1 = df1.to_numpy()

i = 0
correct = 0
incorrect = 0
for arr in df:
  whiteElo = arr[1]
  blackElo = arr[2]

  if (whiteElo > blackElo):
    if (df1[i][0] == 'White'):
      correct += 1
    else:
      incorrect += 1
  else:
    if (df1[i][0] == 'Black'):
      correct += 1
    else:
      incorrect += 1

  i+=1

print(correct)
print(incorrect)
print((100*correct/(correct + incorrect)) / 100)

print(df[2])
print(df1)

"""Data set guide

Event:

Classical = 0

C tourney = 1

Blitz = 2

Bl tourney = 3

Bullet = 4

Bu tourney = 5

Correspondence = 6

Termination:

Time exp = 0

Normal = 1

Result:

0 = black w

1 = white w

2 = tie

"""

one_hot_encoded_data = pd.get_dummies(df, columns = ['Event', 'WhiteElo', 'BlackElo', 'ECO', 'Termination'])
one_hot_encoded_targets = pd.get_dummies(df1, columns = ['Result'])

one_hot_encoded_data

data_array = one_hot_encoded_data.to_numpy()
targets_array = one_hot_encoded_targets.to_numpy()

train_data = data_array[:800000]
valid_data = data_array[800000:]

train_targets = targets_array[:800000]
valid_targets = targets_array[800000:]

def build_model():
    model = models.Sequential()

    model.add(layers.Dense(64, activation='relu', input_shape=(data_array.shape[1],)))
    model.add(layers.Dense(32, activation='relu'))
    model.add(layers.Dense(3, activation='softmax'))

    modelLoss = keras.losses.CategoricalCrossentropy()
    modelMetrics = [tf.keras.metrics.CategoricalCrossentropy()]
    model.compile(optimizer='rmsprop', loss=modelLoss, metrics='accuracy')
    return model

model = build_model()
history = model.fit(train_data,
                    train_targets,
                    epochs=10,
                    validation_data=(valid_data, valid_targets))

history_dict = history.history
history_dict.keys()
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(acc) + 1)

# "bo" is for "blue dot"
plt.plot(epochs, loss, 'ro', label='Training loss')
# b is for "solid blue line"
plt.plot(epochs, val_loss, 'bx-', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

plt.clf()   # clear figure
acc_values = history_dict['accuracy']
val_acc_values = history_dict['val_accuracy']

plt.plot(epochs, acc, 'ro', label='Training acc')
plt.plot(epochs, val_acc, 'bx-', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()